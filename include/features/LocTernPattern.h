#ifndef LOCTERNPATTERN_H
#define LOCTERNPATTERN_H

#include "ImageFeature.h"
#include "EuclideanDistance.h"
#include <math.h>  
#include <fstream>
  

/**
 *  Parameters for class LocTernPattern.
 *        @see LocTernPattern
 */
struct LTPParameters : public FeatureParameters
{
    LTPParameters()
        : normalize(false)
    {}

	/// Flag that indicates if histogram will be normalized. Default: false.
    bool normalize;
};




/**
 *  Feature is an extended local ternary pattern (LTP) of the input image. An LTP pattern is a 3-valued code that is generated by using a threshold. 
 Based on a neighborhood of 8 pixels, the threshold is calculated by multiplying the standard deviation of the neighbors and the center pixel with a factor 0.3.
 Each neighbor of a pixel represents a ternary digit. If the neighbor pixel value is larger than the threshold the respective digit value is set to 2. 
 If the neighbor pixel value is smaller than the threshold but still larger than the negative threshold the digit value is set to 1. 
 Else if the neighbor pixel value is smaller than the negative threshold the digit value is set to 0.
 After converting the ternary number into the decimal system, the feature vector size is reduced to a size of 256 bins by a look-up table. 
 This look-up table is generated with an unnormalized spectral clustering algorithm obtained by MATLAB File Exchange. 
 Therefore the affinity matrix is computed by calculating the hamming distance of all ternary numbers. The smaller the distance the larger the affinity. 
 For the purpose of simplification the affinity of numbers that have a larger distance than 1 is set to 0.  
 Finally the histogram of all feature values is generated and returned as feature vector.

 References: 
 Liao, W.-H.; "Region Description Using Extended Local Ternary Patterns", IEEE International Conference of Pattern Recognition, 2010
 Tan, X.; Triggs, B., "Enhanced Local Texture Feature Sets for Face Recognition under Difficult Lighting Conditions", AMFG, 2007
 Buerg,I.; Fast and efficient spectral clustering, http://www.mathworks.com/matlabcentral/fileexchange/34412-fast-and-efficient-spectral-clustering
 */
class LocTernPattern : public ImageFeature<LTPParameters, std::vector<double> >
{
public:
    typedef ImageFeature<LTPParameters, std::vector<double> > BaseType;

public:
    LocTernPattern();
    virtual ~LocTernPattern();

	 /** Computes feature in given image.
    * @param img Input image. It is internally converted to grayscale and 32F Bit depth if not given in this format.
    * @return Feature of output type is returned. Currently histogram with 256 bins.
    */
    virtual OutputType compute(const cv::Mat& img);
     /** Computes distance between to gray value histogram features. Default is euclidean distance. 
    * @param f1 First feature.
    * @param f2 Second feature.
    * @return Scalar distance between the features. Distance is greater or equal than zero.
    */
	virtual double distance(const OutputType& f1, const OutputType& f2) const;
	 /** Writes last computed feature to a file.
    * @param fname Filepath where feature will be saved.
    * @return Returns true if writing was successful.
    */
    virtual bool writeToFile(const std::string& fname) const;
	 /** Reads feature from file and saves it internally.
    * @param fname Filepath from which feature should be loaded.
    * @return Returns true if reading was successful.
    */
    virtual bool readFromFile(const std::string& fname);

};

#endif

